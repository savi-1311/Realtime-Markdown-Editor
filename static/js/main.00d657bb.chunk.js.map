{"version":3,"sources":["components/MarkdownSanitized.js","components/RawInputArea.js","App.js","reportWebVitals.js","index.js"],"names":["MarkdownSanitized","props","React","useState","className","allowDangerousHtml","value","RawInputArea","codemirrorRef","useRef","useEffect","current","editor","display","wrapper","style","height","localStorage","getItem","textAreaValue","setValue","textFileName","setName","type","onChange","event","target","onClick","dataURI","encodeBase64","saveAs","onBeforeChange","data","setItem","options","autoCursor","autoScroll","mode","theme","lineNumbers","lineWrapping","ref","require","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAmBeA,MAff,SAA2BC,GAAQ,IAAD,EACCC,IAAMC,SAAS,SADhB,mBAOhC,OAPgC,UAQ9B,sBAAKC,UAAU,YAAf,UACA,qBAAKA,UAAU,UAAf,sBACA,qBAAKA,UAAU,UAAf,SAAyB,cAAC,IAAD,CAAeC,oBAAkB,EAAjC,SAAmCJ,EAAMK,c,8BCHvD,SAASC,IACvB,IAAMC,EAAgBN,IAAMO,SAE7BP,IAAMQ,WAAU,WACEF,EAAcG,QAAQC,OAAOC,QAAQC,QAAQC,MAAMC,OAAS,YAJvC,MAMJd,IAAMC,SAASc,aAAaC,QAAQ,kBANhC,mBAM/BC,EAN+B,KAMhBC,EANgB,OAONlB,IAAMC,SAAS,WAPT,mBAO/BkB,EAP+B,KAOjBC,EAPiB,KAwBrC,OACC,qCAEA,sBAAKlB,UAAU,SAAf,UACC,qBAAKA,UAAU,OAAf,gBACA,qBAAKA,UAAU,QAAf,iCAGD,sBAAKA,UAAU,UAAf,UACC,sBAAKA,UAAU,YAAf,UACA,iCACA,uBAAOmB,KAAK,OAAOC,SArBD,SAACC,GACrBH,EAAQG,EAAMC,OAAOpB,QAoByBA,MAAOe,IACnD,wBAAQM,QAlBK,WAEf,IAAMC,EAAU,0BAA4BC,YAAaV,GACzDW,YAAOF,EAASP,IAed,qBAEA,qBAAKjB,UAAU,OAAf,SACH,cAAC,aAAD,CAAYE,MAAOa,EAAeY,eAAgB,SAACnB,EAAQoB,EAAM1B,GAAWc,EAASd,GACpFW,aAAagB,QAAQ,gBAAiB3B,IAAW4B,QAAS,CAC3DC,YAAY,EACTC,YAAY,EACZC,KAAM,WACNC,MAAO,WACPC,aAAa,EACbC,cAAc,GACbC,IAAKjC,SAIN,cAAC,EAAD,CAAmBF,MAASa,UAvDhCuB,EAAQ,IACRA,EAAQ,KACRA,EAAQ,KCCOC,MAPf,WACE,OACE,cAACpC,EAAD,KCOWqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.00d657bb.chunk.js","sourcesContent":["import React ,{ Component } from 'react';\nimport './Styles.css';\nimport ReactMarkdown from 'react-markdown';\n\nfunction MarkdownSanitized(props) {\n\tconst [textAreaValue, setValue] = React.useState(\"Hello\");\n\nconst handleChange = (event) => {\n\t\tsetValue(event.target.value);\n  }\n\n  return (\n    <div className=\"container\">\n    <div className=\"heading\">Preview:</div>\n    <div className=\"content\"><ReactMarkdown allowDangerousHtml>{props.value}</ReactMarkdown></div>\n    </div>\n    );\n}\n\nexport default MarkdownSanitized;\n\n","import './Styles.css';\nimport React ,{ Component } from 'react';\nimport MarkdownSanitized from './MarkdownSanitized.js';\nimport { saveAs, encodeBase64 } from '@progress/kendo-file-saver';\nimport {Controlled as CodeMirror} from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/3024-day.css';\nrequire('codemirror/mode/xml/xml');\nrequire('codemirror/mode/javascript/javascript');\nrequire('codemirror/mode/markdown/markdown');\n\nexport default function RawInputArea() {\n\tconst codemirrorRef = React.useRef();\n\nReact.useEffect(() => {\n  const current = codemirrorRef.current.editor.display.wrapper.style.height = \"1000px\";\n});\n\tconst [textAreaValue, setValue] = React.useState(localStorage.getItem('textAreaValue'));\n\tconst [textFileName, setName] = React.useState(\"test.md\");\n\nconst handleChange = (event) => {\n\t\tsetValue(event.target.value);\n\t\tlocalStorage.setItem('textAreaValue', event.target.value);\n  }\n\nconst handleChange2 = (event) => {\n\t\tsetName(event.target.value);\n  }\n\nconst SaveFile = () => {\n\n\t\tconst dataURI = \"data:text/plain;base64,\" + encodeBase64(textAreaValue);\n\t\tsaveAs(dataURI, textFileName);\n  }\n\n  return (\n  \t<>\n\n  \t<div className=\"topnav\">\n    <div className=\"logo\">ME</div>\n    <div className=\"logo2\">Markdown Editor!</div>\n    </div>\n\n  \t<div className=\"wrapper\">\n    <div className=\"container\">\n    <form>\n    <input type=\"text\" onChange={handleChange2} value={textFileName}></input>\n    <button onClick={SaveFile}>Save</button>\n    </form>\n    <div className=\"code\">\n\t<CodeMirror value={textAreaValue} onBeforeChange={(editor, data, value) => {setValue(value);\n\t\tlocalStorage.setItem('textAreaValue', value); }} options={{\n\tautoCursor: false,\n    autoScroll: false,\n    mode: 'markdown',\n    theme: '3024-day',\n    lineNumbers: true,\n    lineWrapping: true\n  }} ref={codemirrorRef}/>\n  </div>\n\n    </div>\n    <MarkdownSanitized value = {textAreaValue}/>\n    </div>\n    </>\n    );\n}\n\n","import './App.css';\nimport RawInputArea from './components/RawInputArea.js';\n\nfunction App() {\n  return (\n    <RawInputArea/>\n    \n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}